JUNIPER


Find:

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.Serializer;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;

Replace:

import org.apache.fory.Fory;
import org.apache.fory.memory.MemoryBuffer;
import org.apache.fory.serializer.Serializer;

Find:

package com.github.tommyettinger.kryo.juniper;

Replace:

package com.github.tommyettinger.tantrum.juniper;

Find:

Kryo \{@link Serializer\}

Replace:

Fory {@link Serializer}

Find:

public (\w+)Serializer\Q() {
        setImmutable(false);
        setAcceptsNull(false);
    }
\E

Replace:

public $1Serializer(Fory fory) {
        super(fory, $1.class);
    }

Find:

public void write\(final Kryo kryo\, final Output output\,

Replace:

public void write(final MemoryBuffer output,

Find:

read\(final Kryo kryo.+?\)

Replace:

read(MemoryBuffer input)

Find:

Var(\w+)\(([^,]*),? ?(false|true)\)

Replace:

$1($2)

Find:

\s+@Override
\s+public \w+ copy\(Kryo kryo,[^\}]+\}

Replace:

{Nothing}

JUNIPER.DISTRIBUTION


Find:

public (\w+)Serializer\Q() {
        super(false, false);
    }
\E

Replace:

public $1Serializer(Fory fory) {
        super(fory, $1.class);
    }




JUNIPER.TESTS

Find:

Kryo kryo = new Kryo\(\);

Replace:

Fory fory = Fory.builder().withLanguage(Language.JAVA).build();

Find:

kryo.register\((\w+)\.class, new \1Serializer\(\)\);

Replace:

fory.registerSerializer($1.class, new $1Serializer(fory));

Find:

ByteArrayOutputStream baos \= new ByteArrayOutputStream\(32\)\;
        Output output \= new Output\(baos\)\;
        kryo\.writeObject\(output\, data\)\;
        byte\[\] bytes \= output\.toBytes\(\)\;
        try \(Input input \= new Input\(bytes\)\)

Replace:

byte[] bytes = fory.serializeJavaObject(data);

Find:

(\w+) data2 = kryo.readObject\(input, \1.class\);

Replace:

$1 data2 = fory.deserializeJavaObject(bytes, $1.class);

Find:

kryo\.writeClassAndObject\(output\, object\.generator\)\;

Replace:

fory.writeRef(output, object.generator);

Find:

kryo\.readClassAndObject\(input\)

Replace:

fory.readRef(input)
